[build-system]
requires = ["setuptools>=68.0", "wheel>=0.41.0"]
build-backend = "setuptools.build_meta"

[project]
name = "nse-adaptive-regime-trading"
version = "0.1.0"
description = "Production-grade algorithmic trading system for NSE combining Qlib, TensorTrade, and Zerodha Kite Connect"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = [
    "algorithmic-trading",
    "quantitative-finance",
    "reinforcement-learning",
    "nse",
    "qlib",
    "tensortrade",
    "zerodha",
    "machine-learning",
    "trading-bot",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed",
]

dependencies = [
    "openbb>=4.2.4",
    "qlib>=0.9.3",
    "tensortrade>=1.0.3",
    "kiteconnect>=4.2.0",
    "pandas>=2.2.2",
    "numpy>=1.26.4",
    "torch>=2.3.1",
    "stable-baselines3>=2.3.2",
    "lightgbm>=4.3.0",
    "scikit-learn>=1.5.0",
    "duckdb>=0.10.3",
    "pydantic>=2.7.3",
    "pydantic-settings>=2.3.0",
    "loguru>=0.7.2",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.1",
    "requests>=2.32.3",
]

[project.optional-dependencies]
dev = [
    "black>=24.4.2",
    "isort>=5.13.2",
    "mypy>=1.10.0",
    "flake8>=7.0.0",
    "pylint>=3.2.2",
    "pre-commit>=3.7.1",
    "bandit>=1.7.8",
]

test = [
    "pytest>=8.2.1",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.23.7",
    "pytest-mock>=3.14.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.103.1",
]

docs = [
    "sphinx>=7.3.7",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=2.1.0",
]

jupyter = [
    "jupyter>=1.0.0",
    "jupyterlab>=4.2.1",
    "ipython>=8.25.0",
    "ipywidgets>=8.1.3",
]

viz = [
    "matplotlib>=3.9.0",
    "seaborn>=0.13.2",
    "plotly>=5.22.0",
    "mplfinance>=0.12.10b0",
]

all = [
    "nse-adaptive-regime-trading[dev,test,docs,jupyter,viz]",
]

[project.urls]
Homepage = "https://github.com/yourusername/nse-adaptive-regime-trading"
Documentation = "https://github.com/yourusername/nse-adaptive-regime-trading/docs"
Repository = "https://github.com/yourusername/nse-adaptive-regime-trading"
Issues = "https://github.com/yourusername/nse-adaptive-regime-trading/issues"

[project.scripts]
nse-trade = "src.cli:main"

[tool.setuptools]
packages = {find = {include = ["src", "src.*"]}}

[tool.setuptools.package-data]
src = ["py.typed"]

# =============================================================================
# Black Configuration
# =============================================================================
[tool.black]
line-length = 100
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | data
  | notebooks
)/
'''

# =============================================================================
# isort Configuration
# =============================================================================
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/data/*", "*/notebooks/*", "*/.venv/*"]
known_first_party = ["src"]
known_third_party = [
    "numpy",
    "pandas",
    "torch",
    "qlib",
    "tensortrade",
    "kiteconnect",
    "openbb",
]

# =============================================================================
# mypy Configuration
# =============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
strict_equality = true
strict_optional = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "qlib.*",
    "tensortrade.*",
    "kiteconnect.*",
    "openbb.*",
    "empyrical.*",
    "ta.*",
    "pandas_ta.*",
]
ignore_missing_imports = true

# =============================================================================
# pytest Configuration
# =============================================================================
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
    "live: marks tests that require live market data",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# =============================================================================
# Coverage Configuration
# =============================================================================
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/notebooks/*",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abstract",
]

[tool.coverage.html]
directory = "htmlcov"

# =============================================================================
# pylint Configuration
# =============================================================================
[tool.pylint.main]
fail-under = 8.0
ignore = ["CVS", ".git", "__pycache__", "data", "notebooks"]
jobs = 0
limit-inference-results = 100
persistent = true
py-version = "3.11"

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name (sometimes necessary for math)
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0212",  # Access to protected member (sometimes necessary)
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 8
max-attributes = 12
max-bool-expr = 5
max-branches = 15
max-locals = 20
max-parents = 7
max-public-methods = 25
max-returns = 6
max-statements = 60
min-public-methods = 1

# =============================================================================
# bandit Configuration (Security Linting)
# =============================================================================
[tool.bandit]
exclude_dirs = ["tests", "notebooks", "data"]
skips = ["B101"]  # Skip assert_used warnings in non-test code

# =============================================================================
# ruff Configuration (Fast Python Linter - Alternative to flake8)
# =============================================================================
[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    "*.egg-info",
    "data",
    "notebooks",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

